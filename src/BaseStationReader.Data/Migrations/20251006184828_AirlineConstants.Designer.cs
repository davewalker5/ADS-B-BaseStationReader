// <auto-generated />
using System;
using BaseStationReader.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseStationReader.Data.Migrations
{
    [DbContext(typeof(BaseStationReaderDbContext))]
    [Migration("20251006184828_AirlineConstants")]
    partial class AirlineConstants
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("BaseStationReader.Entities.Api.Aircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Age");

                    b.Property<int?>("Manufactured")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Manufactured");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Registration")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Registration");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("AIRCRAFT", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IATA");

                    b.Property<string>("ICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ICAO");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("AIRLINE", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AirlineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Destination");

                    b.Property<string>("Embarkation")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Embarkation");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IATA");

                    b.Property<string>("ICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ICAO");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Number");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.ToTable("FLIGHT", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("MANUFACTURER", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("IATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("IATA");

                    b.Property<string>("ICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ICAO");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("MODEL", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Sighting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<int>("AircraftId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("AircraftId");

                    b.Property<int>("FlightId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("FlightId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.HasIndex("FlightId");

                    b.ToTable("SIGHTING", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Heuristics.AirlineConstants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("AirlineIATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineIATA");

                    b.Property<string>("AirlineICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineICAO");

                    b.Property<int?>("ConstantDelta")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ConstantDelta");

                    b.Property<decimal>("ConstantDeltaPurity")
                        .HasColumnType("TEXT")
                        .HasColumnName("ConstantDeltaPurity");

                    b.Property<string>("ConstantPrefix")
                        .HasColumnType("TEXT")
                        .HasColumnName("ConstantPrefix");

                    b.Property<decimal>("IdentityRate")
                        .HasColumnType("TEXT")
                        .HasColumnName("IdentityRate");

                    b.HasKey("Id");

                    b.ToTable("AIRLINE_CONSTANTS", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Heuristics.ConfirmedMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("AirlineIATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineIATA");

                    b.Property<string>("AirlineICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineICAO");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Callsign");

                    b.Property<string>("Digits")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Digits");

                    b.Property<string>("FlightIATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("FlightIATA");

                    b.HasKey("Id");

                    b.ToTable("CONFIRMED_MAPPING", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Heuristics.NumberSuffixRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("AirlineIATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineIATA");

                    b.Property<string>("AirlineICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineICAO");

                    b.Property<string>("Digits")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Digits");

                    b.Property<string>("Numeric")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Numeric");

                    b.Property<decimal>("Purity")
                        .HasColumnType("TEXT")
                        .HasColumnName("Purity");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Suffix");

                    b.Property<int>("Support")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Support");

                    b.HasKey("Id");

                    b.ToTable("NUMBER_SUFFIX", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Heuristics.SuffixDeltaRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("AirlineIATA")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineIATA");

                    b.Property<string>("AirlineICAO")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("AirlineICAO");

                    b.Property<int>("Delta")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Delta");

                    b.Property<decimal>("Purity")
                        .HasColumnType("TEXT")
                        .HasColumnName("Purity");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Suffix");

                    b.Property<int>("Support")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Support");

                    b.HasKey("Id");

                    b.ToTable("SUFFIX_DELTA", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Tracking.AircraftPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<int>("AircraftId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Altitude");

                    b.Property<double?>("Distance")
                        .HasColumnType("REAL")
                        .HasColumnName("Distance");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Longitude");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AircraftId");

                    b.ToTable("POSITION", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Tracking.TrackedAircraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Address");

                    b.Property<decimal?>("Altitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Altitude");

                    b.Property<string>("Callsign")
                        .HasColumnType("TEXT")
                        .HasColumnName("Callsign");

                    b.Property<double?>("Distance")
                        .HasColumnType("REAL")
                        .HasColumnName("Distance");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("DATETIME")
                        .HasColumnName("FirstSeen");

                    b.Property<decimal?>("GroundSpeed")
                        .HasColumnType("TEXT")
                        .HasColumnName("GroundSpeed");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("DATETIME")
                        .HasColumnName("LastSeen");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("TEXT")
                        .HasColumnName("Longitude");

                    b.Property<int>("LookupAttempts")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LookupTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Messages")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Messages");

                    b.Property<string>("Squawk")
                        .HasColumnType("TEXT")
                        .HasColumnName("Squawk");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Status");

                    b.Property<decimal?>("Track")
                        .HasColumnType("TEXT")
                        .HasColumnName("Track");

                    b.Property<decimal?>("VerticalRate")
                        .HasColumnType("TEXT")
                        .HasColumnName("VerticalRate");

                    b.HasKey("Id");

                    b.ToTable("TRACKED_AIRCRAFT", (string)null);
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Aircraft", b =>
                {
                    b.HasOne("BaseStationReader.Entities.Api.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Flight", b =>
                {
                    b.HasOne("BaseStationReader.Entities.Api.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Model", b =>
                {
                    b.HasOne("BaseStationReader.Entities.Api.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("BaseStationReader.Entities.Api.Sighting", b =>
                {
                    b.HasOne("BaseStationReader.Entities.Api.Aircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BaseStationReader.Entities.Api.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("BaseStationReader.Entities.Tracking.AircraftPosition", b =>
                {
                    b.HasOne("BaseStationReader.Entities.Tracking.TrackedAircraft", "Aircraft")
                        .WithMany()
                        .HasForeignKey("AircraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aircraft");
                });
#pragma warning restore 612, 618
        }
    }
}
